{"version":3,"sources":["Admin.js","User.js","App.js","serviceWorker.js","index.js"],"names":["Admin","props","state","style","position","height","width","background","display","justifyContent","alignItems","React","Component","User","test","a","fetch","url","response","console","log","json","data","this","App","openUser","setState","type","loggedIn","openAdmin","name","boxShadow","onClick","className","flex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kOAEqBA,G,wDAEjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,GAFE,E,qDASf,OACI,yBAAKC,MAAO,CAACC,SAAU,WAAYC,OAAQ,OAAQC,MAAO,OAAQC,WAAY,MAAOC,QAAS,OAAQC,eAAgB,SAAUC,WAAY,gB,GAZrHC,IAAMC,Y,uBCApBC,E,kDAEjB,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IAmBVa,KApBmB,sBAoBZ,8BAAAC,EAAA,sEACoBC,MAAM,EAAKf,MAAMgB,IAAI,cADzC,cACGC,EADH,OAEHC,QAAQC,IAAIF,GAFT,SAGgBA,EAASG,OAHzB,OAGGC,EAHH,OAIHH,QAAQC,IAAIE,GAJT,2CAlBH,EAAKpB,MAAQ,GAFE,E,gEAQfqB,KAAKT,S,+BAKL,OACI,yBAAKX,MAAO,CAACC,SAAU,WAAYC,OAAQ,OAAQC,MAAO,OAAQC,WAAY,UAAWC,QAAS,OAAQC,eAAgB,SAAUC,WAAY,gB,GAhB1HC,IAAMC,WCGnBY,E,kDAEjB,WAAYvB,GAAQ,IAAD,8BACf,cAAMA,IAoCZwB,SAAW,WACT,EAAKC,SAAS,CAACC,KAAM,OAAQC,UAAU,KAtCpB,EAwCrBC,UAAY,WACV,EAAKH,SAAS,CAACC,KAAM,QAASC,UAAU,KAvCpC,EAAK1B,MAAQ,CACXyB,KAAM,OACNC,UAAU,EACVE,KAAM,UAENb,IAAK,yBAPQ,E,qDAaf,OACD,yBAAKd,MAAO,CAACC,SAAU,WAAYC,OAAQ,OAAQC,MAAO,OAAQC,WAAY,UAAWC,QAAS,OAAQC,eAAgB,SAAUC,WAAY,WAExIa,KAAKrB,MAAM0B,SAUU,SAApBL,KAAKrB,MAAMyB,KACT,kBAAC,EAAD,CAAMV,IAAKM,KAAKrB,MAAMe,MAEtB,kBAAC,EAAD,CAAOa,KAAMP,KAAKrB,MAAM4B,OAZ1B,yBAAK3B,MAAO,CAACE,OAAQ,QAASC,MAAO,QAASyB,UAAW,uBAAwBvB,QAAS,SACxF,yBAAKwB,QAAST,KAAKM,UAAWI,UAAW,SAAU9B,MAAO,CAAC+B,KAAM,EAAG7B,OAAQ,OAAQG,QAAS,OAAQC,eAAgB,SAAUC,WAAY,WAA3I,SAGA,yBAAKsB,QAAST,KAAKE,SAAUQ,UAAW,SAAU9B,MAAO,CAAC+B,KAAM,EAAG7B,OAAQ,OAAQG,QAAS,OAAQC,eAAgB,SAAUC,WAAY,WAA1I,c,GAvBeC,IAAMC,WCOnBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.ccec60d7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default class Admin extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n\trender()\t{\r\n\r\n        return (\r\n            <div style={{position: 'absolute', height: '100%', width: '100%', background: 'red', display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport default class User extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.test()\r\n    }\r\n\r\n\trender()\t{\r\n\r\n        return (\r\n            <div style={{position: 'absolute', height: '100%', width: '100%', background: '#eeeeee', display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n            \r\n            </div>\r\n        )\r\n    }\r\n\r\n    test = async () => {\r\n        const response = await fetch(this.props.url+'/api/items');\r\n        console.log(response)\r\n        const data = await response.json();\r\n        console.log(data)\r\n    }\r\n}\r\n\r\n","import React from 'react'\nimport \"./app.css\"\n\nimport Admin from './Admin.js'\nimport User from './User.js'\nexport default class App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          type: \"none\",\n          loggedIn: false,\n          name: \"untiled\",\n\n          url: 'http://localhost:8080'\n        };\n    }\n\n\trender()\t{\n\n        return (\n\t\t\t    <div style={{position: 'absolute', height: '100%', width: '100%', background: '#eeeeee', display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n            {\n              !this.state.loggedIn ?\n                <div style={{height: '600px', width: '300px', boxShadow: \"2px 2px 10px #BCBCBC\", display: 'flex', }}>\n                  <div onClick={this.openAdmin} className={\"button\"} style={{flex: 1, height: '100%', display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n                    Admin\n                  </div>\n                  <div onClick={this.openUser} className={\"button\"} style={{flex: 1, height: '100%', display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n                    User\n                  </div>\n                </div>\n                :\n                this.state.type === \"user\" ?\n                  <User url={this.state.url} />\n                    :\n                  <Admin name={this.state.name} />\n            }\n            \n\n          </div>\n        )\n    }\n\n  openUser = () => {\n    this.setState({type: 'user', loggedIn: true})\n  }\n  openAdmin = () => {\n    this.setState({type: 'admin', loggedIn: true})\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}